import {Button} from "client/components/button/button"
import {Form} from "client/components/form/form"
import {NumberInputField} from "client/components/number_input/number_input"
import {useBeforeNavigation} from "client/components/router/routing_context"
import {Row} from "client/components/row_col/row_col"
import {Separator} from "client/components/separator/separator"
import {TextInputField} from "client/components/text_input/text_input_field"
import {useToastContext} from "client/components/toast/toast_context"
import {UnsavedChanges, useUnsavedChanges} from "client/components/unsaved_changes_context/unsaved_changes_context"
import {useSaveableState} from "client/components/unsaved_changes_context/use_saveable_state"
import {useApiClient} from "client/parts/api_context"
import {CentralColumn} from "client/parts/layouts/central_column"
import {useProject} from "client/parts/project_context"
import {TextureTreeModal} from "client/parts/textures/texture_tree_modal"
import {Tree} from "common/tree"
import {getRandomUUID} from "common/uuid"
import {NamedId, TextureFile} from "data/project"
import {Icon} from "generated/icons"
import {useState} from "react"

const textureLoadingToastId = getRandomUUID()

export const SettingsPage = () => {
	const [project, setProject] = useProject()
	const {
		state: settings, setState: setSettings, isUnsaved, save
	} = useSaveableState(project.config, () => {
		setProject(project => ({...project, config: settings}))
	})

	const [textureForest, setTextureForest] = useState<Tree<TextureFile, NamedId>[] | null>(null)
	const {saveOrAbort} = useUnsavedChanges()
	useBeforeNavigation(() => saveOrAbort({actionDescription: "navigate away"}))

	const {addToast, removeToast} = useToastContext()
	const apiClient = useApiClient()
	const checkTexturePath = async() => {
		addToast({
			id: textureLoadingToastId,
			text: "Loading textures...",
			isStepRotating: true,
			icon: Icon.spinner
		})
		try {
			const forest = await apiClient.getTextureFiles(settings.textureDirectoryPath)
			setTextureForest(forest)
		} catch(e){
			// nothing. error toast is already displayed
		}
		removeToast(textureLoadingToastId)
	}

	return (
		<CentralColumn width={["400px", "75vw", "800px"]}>
			{textureForest !== null && <TextureTreeModal
				textureForest={textureForest}
				onClose={() => setTextureForest(null)}
			/>}
			<UnsavedChanges isUnsaved={isUnsaved} save={save}>
				<Form fieldLabelWidth="20rem" fieldInputWidth="30rem">
					<Separator>General settings</Separator>
					<NumberInputField
						value={settings.inworldUnitPixelSize}
						onChange={inworldUnitPixelSize => setSettings(settings => ({...settings, inworldUnitPixelSize}))}
						label="In-world unit size, px"
						min={0}
					/>
					<Row gap>
						<TextInputField
							value={settings.textureDirectoryPath}
							onChange={textureDirectoryPath => setSettings(settings => ({...settings, textureDirectoryPath}))}
							label="Textures path"
						/>
						<Button text="Check" onClick={checkTexturePath}/>
					</Row>
					<Separator>Output paths</Separator>
					<TextInputField
						value={settings.resourcePackPath}
						onChange={resourcePackPath => setSettings(settings => ({...settings, resourcePackPath}))}
						label="Resource pack path"
					/>
					<TextInputField
						value={settings.ts.path}
						onChange={path => setSettings(settings => ({...settings, ts: {...settings.ts, path}}))}
						label="Typescript bindings path"
					/>
					<TextInputField
						value={settings.entityClassesDirectoryPath}
						onChange={entityClassesDirectoryPath => setSettings(settings => ({...settings, entityClassesDirectoryPath}))}
						label="Entity classes path"
					/>
					<Separator hint="Names of various identifiers in autogenerated TypeScript code.">Identifier names</Separator>
					<TextInputField
						value={settings.ts.entityEnumName}
						onChange={entityEnumName => setSettings(settings => ({...settings, ts: {...settings.ts, entityEnumName}}))}
						label="Entity enum"
					/>
					<TextInputField
						value={settings.ts.inputBindSetEnumName}
						onChange={inputBindSetEnumName => setSettings(settings => ({...settings, ts: {...settings.ts, inputBindSetEnumName}}))}
						label="Input binds enum"
					/>
					<TextInputField
						value={settings.ts.inputBindsNamespaceName}
						onChange={inputBindsNamespaceName => setSettings(settings => ({...settings, ts: {...settings.ts, inputBindsNamespaceName}}))}
						label="Input binds namespace"
					/>
					<TextInputField
						value={settings.ts.loaderVariableName}
						onChange={loaderVariableName => setSettings(settings => ({...settings, ts: {...settings.ts, loaderVariableName}}))}
						label="Loader"
					/>
					<TextInputField
						value={settings.ts.particleEnumName}
						onChange={particleEnumName => setSettings(settings => ({...settings, ts: {...settings.ts, particleEnumName}}))}
						label="Particle enum"
					/>
				</Form>
			</UnsavedChanges>
		</CentralColumn>
	)
}