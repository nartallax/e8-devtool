import {Button} from "client/components/button/button"
import {Form} from "client/components/form/form"
import {ValidatorSets} from "client/components/form/validators"
import {NumberInputField} from "client/components/number_input/number_input"
import {useBeforeNavigation} from "client/components/router/routing_context"
import {Row} from "client/components/row_col/row_col"
import {Separator} from "client/components/separator/separator"
import {TextInputField} from "client/components/text_input/text_input_field"
import {useToastContext} from "client/components/toast/toast_context"
import {UnsavedChanges, useUnsavedChanges} from "client/components/unsaved_changes_context/unsaved_changes_context"
import {useSaveableState} from "client/components/unsaved_changes_context/use_saveable_state"
import {useApiClient} from "client/parts/api_context"
import {CentralColumn} from "client/parts/layouts/central_column"
import {useProject} from "client/parts/project_context"
import {TextureTreeModal} from "client/parts/textures/texture_tree_modal"
import {Tree} from "common/tree"
import {getRandomUUID} from "common/uuid"
import {NamedId, TextureFile} from "data/project"
import {Icon} from "generated/icons"
import {useState} from "react"

const textureLoadingToastId = getRandomUUID()

const scaleHint = `Size, in pixels, of one in-world unit on x1 zoom. Affects many things:
- Resolution of textures
- Granularity of physical hitboxes
- Physics calculation in runtime
- Zoom/magnification calculations
...and other small things.
`

export const SettingsPage = () => {
	const [project, setProject] = useProject()
	const {
		state: settings, setState: setSettings, isUnsaved, save
	} = useSaveableState(project.config, () => {
		setProject(project => ({...project, config: settings}))
	})

	const [textureForest, setTextureForest] = useState<Tree<TextureFile, NamedId>[] | null>(null)
	const {saveOrAbort} = useUnsavedChanges()
	useBeforeNavigation(() => saveOrAbort({actionDescription: "navigate away"}))

	const {addToast, removeToast} = useToastContext()
	const apiClient = useApiClient()
	const checkTexturePath = async() => {
		addToast({
			id: textureLoadingToastId,
			text: "Loading textures...",
			isStepRotating: true,
			icon: Icon.spinner
		})
		try {
			const forest = await apiClient.getTextureFiles(settings.textureDirectoryPath)
			setTextureForest(forest)
		} catch(e){
			// nothing. error toast is already displayed
		}
		removeToast(textureLoadingToastId)
	}

	return (
		<CentralColumn width={["400px", "75vw", "800px"]}>
			{textureForest !== null && <TextureTreeModal
				textureForest={textureForest}
				onClose={() => setTextureForest(null)}
			/>}
			<UnsavedChanges isUnsaved={isUnsaved} save={save}>
				<Form fieldLabelWidth="20rem" fieldInputWidth="30rem" showAllErrors>
					<Separator>General settings</Separator>
					<NumberInputField
						value={settings.inworldUnitPixelSize}
						onChange={inworldUnitPixelSize => setSettings(settings => ({...settings, inworldUnitPixelSize}))}
						label="Scale"
						hint={scaleHint}
						min={0}
					/>
					<Separator hint="All paths are calculated relative to directory that contains project definition file. It is advised to keep them relative for portability.">Paths</Separator>
					<Row gap>
						<TextInputField
							value={settings.textureDirectoryPath}
							onChange={textureDirectoryPath => setSettings(settings => ({...settings, textureDirectoryPath}))}
							label="Textures path"
							hint="Path to directory that contains textures."
							validators={ValidatorSets.nonEmpty}
						/>
						<Button text="Check" onClick={checkTexturePath}/>
					</Row>
					<TextInputField
						value={settings.resourcePackPath}
						onChange={resourcePackPath => setSettings(settings => ({...settings, resourcePackPath}))}
						label="Resource pack path"
						hint="Path to autogenerated resource pack. Resource pack is binary file generated by devtool and loaded in runtime by the engine. Resource pack contains textures, sounds, hitboxes and other stuff you may edit in devtool."
						validators={ValidatorSets.nonEmpty}
					/>
					<TextInputField
						value={settings.ts.path}
						onChange={path => setSettings(settings => ({...settings, ts: {...settings.ts, path}}))}
						label="Typescript bindings path"
						hint="Path to autogenerated file with Typescript bindings. Devtool will generate those bindings for you to use. Bindings describe contents of resource pack."
						validators={ValidatorSets.nonEmpty}
					/>
					<TextInputField
						value={settings.entityClassesDirectoryPath}
						onChange={entityClassesDirectoryPath => setSettings(settings => ({...settings, entityClassesDirectoryPath}))}
						label="Entity classes path"
						hint="Path to a root directory with files that contain entity classes. Those files should end with .entity.ts. They will be included in autogenerated .ts file to ensure they are included in the build."
						validators={ValidatorSets.nonEmpty}
					/>
					<Separator hint="Names of various identifiers in autogenerated TypeScript code.">Identifier names</Separator>
					<TextInputField
						value={settings.ts.entityEnumName}
						onChange={entityEnumName => setSettings(settings => ({...settings, ts: {...settings.ts, entityEnumName}}))}
						label="Entity enum"
						validators={ValidatorSets.nonEmpty}
					/>
					<TextInputField
						value={settings.ts.inputBindSetEnumName}
						onChange={inputBindSetEnumName => setSettings(settings => ({...settings, ts: {...settings.ts, inputBindSetEnumName}}))}
						label="Input binds enum"
						validators={ValidatorSets.nonEmpty}
					/>
					<TextInputField
						value={settings.ts.inputBindsNamespaceName}
						onChange={inputBindsNamespaceName => setSettings(settings => ({...settings, ts: {...settings.ts, inputBindsNamespaceName}}))}
						label="Input binds namespace"
						validators={ValidatorSets.nonEmpty}
					/>
					<TextInputField
						value={settings.ts.loaderVariableName}
						onChange={loaderVariableName => setSettings(settings => ({...settings, ts: {...settings.ts, loaderVariableName}}))}
						label="Loader"
						validators={ValidatorSets.nonEmpty}
					/>
					<TextInputField
						value={settings.ts.particleEnumName}
						onChange={particleEnumName => setSettings(settings => ({...settings, ts: {...settings.ts, particleEnumName}}))}
						label="Particle enum"
						validators={ValidatorSets.nonEmpty}
					/>
				</Form>
			</UnsavedChanges>
		</CentralColumn>
	)
}