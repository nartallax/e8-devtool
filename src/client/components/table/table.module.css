.table, .tableHeaders {
	display: grid;
	grid-auto-flow: row dense;
	grid-auto-rows: fit-content(2rem);
	gap: var(--border-width);
}

.table {
	--border-width: 1px;
	--cell-padding: 0.5rem;
	--border-color: #444;
	--border-radius: 0.25rem;
	--branch-radius: 0.75rem;
  --branch-width: 2px;
  --branch-border: var(--branch-width) solid #888;
	--tree-element-width: 2rem;
	--cell-background-color: #222;

	flex: 1 1 0;
	align-self: stretch;
	overflow: auto;
	max-height: 100%;
	max-width: 100%;
	min-height: 0;
	min-width: 0;
	position: relative;
	/* it's nice to always have border around the whole table
	it looks better when scrolling */
	border: var(--border-width) solid var(--border-color);

	&.withHeaders {
		border-radius: var(--border-radius) var(--border-radius) 0 0;
	}

	&.noTextSelection {
		/* wonder if I should add this class to the whole page instead */
		user-select: none;
	}

	tbody {
		overflow: auto;
	}

	.tableCell, .tableHeader {
		outline: var(--border-width) solid var(--border-color);
		display: flex;
		flex-direction: row;
		align-items: stretch;
		justify-content: flex-start;
		transition: opacity 0.5s;
	}

	.tableHeaders {
		grid-row: 1 / 2;
		grid-column: 1 / -1;
		position: sticky;
		top: 0; /* that's for position:sticky to work */
		background-color: #333;
		outline: var(--border-width) solid var(--border-color);
	}

	.tableHeader {
		background-color: #333;
		position: relative;

		&.isInteractive {
			cursor: pointer;
		}
		
		&.isDragged {
			z-index: 1;
			left: var(--drag-offset);
		}
		
		.headerContent {
			padding: var(--cell-padding);
			flex: 1 1 0;
			min-width: 0;
			overflow: hidden;
			text-overflow: ellipsis;
		}

		.headerIcon {
			height: 100%;
			padding: 0 var(--cell-padding);
			display: flex;
			flex-direction: row;
			align-items: center;
			justify-content: center;
		}

		.orderHeaderIcon {
			position: relative;
			
			.orderHeaderIconText {
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				display: flex;
				flex-direction: row;
				align-items: center;
				justify-content: center;
				font-size: 1rem;
				text-shadow:
					1px 1px 0 var(--color-foreground),
					-1px 1px 0 var(--color-foreground),
					-1px -1px 0 var(--color-foreground),
					1px -1px 0 var(--color-foreground);
			}
		}

		.columnResizer {
			position: absolute;
			width: 1rem;
			top: 0;
			bottom: 0;
			cursor: ew-resize;
		}

		.columnLeftResizer {
			left: calc(var(--border-width) * -1);
		}

		.columnRightResizer {
			right: calc(var(--border-width) * -1);
		}
	}

	.tableCell {
		padding: var(--cell-padding);
		background-color: var(--cell-background-color);
	}

}

.tableLoadingRow {
	grid-column: 1 / -1;
	padding: 0.25rem;
	text-align: center;

	&:before {
		content: "Loading...";
	}
}

.tableInfiniteScrollRow {
	position: relative;
	grid-column: 1 / -1;
	height: 0;

	.tableInfiniteScrollTrigger {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: flex-end;
		height: var(--trigger-offset);

		/* this element will overlay over other rows, and it shouldn't prevent interactions */
		background-color: transparent;
		pointer-events: none;
	}
}

.treeControls {
	align-self: stretch;
	display: flex;
	flex-direction: row;
	align-items: stretch;
	justify-content: flex-start;
	flex: 0 0 0;
	margin: 
		calc(var(--cell-padding) * -1) 
		var(--cell-padding) 
		calc(var(--cell-padding) * -1)
		calc(var(--cell-padding) * -1);

	&.isExpanded .expander {
		transform: rotate(90deg);
	}

	.expander {
		transition: transform 0.25s;
		cursor: pointer;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		background-color: transparent;
	}

	.empty,
	.corner,
	.vertical,
	.split,
	.horisontal,
	.expander {
		width: var(--tree-element-width);
		height: 100%;
		position: relative;
	}

	.empty,
	.corner,
	.vertical,
	.split,
	.horisontal {
		&::before,
		&::after {
			border: var(--branch-border);
			position: absolute;
		}
	}

	.split::before {
    content: "";
    top: calc(var(--border-width) * -1);
    bottom: calc(var(--border-width) * -1);
    left: 50%;
    border-width: 0 0 0 var(--branch-width);
  }

  .split::after {
    content: "";
    top: calc(var(--border-width) * -1);
    bottom: 50%;
    left: 50%;
    right: -12.5%;
    border-width: 0 0 var(--branch-width) var(--branch-width);
    border-radius: 0 0 0 var(--branch-radius);
  }

	.corner::before {
    content: "";
    top: -15%;
    bottom: 50%;
    left: 50%;
    right: -12.5%;
    border-width: 0 0 var(--branch-width) var(--branch-width);
    border-radius: 0 0 0 var(--branch-radius);
  }

	.vertical::before {
    content: "";
    top: calc(var(--border-width) * -1);
    bottom: calc(var(--border-width) * -1);
    left: 50%;
    border-width: 0 0 0 var(--branch-width);
	}

	.horisontal::before {
    content: "";
    bottom: 50%;
    left: 0;
    right: 0;
    border-width: 0 0 var(--branch-width) 0;
  }
}

.movedRowCell {
	opacity: 0.5;
}

.moveDropLocator {
	grid-column: 1 / -1;
	position: absolute;
	left: 0;
	right: 0;
	height: 0;
	overflow: visible;
	top: var(--drop-locator-y);
	pointer-events: none;
	
	&:before {
		content: ' ';
		position: absolute;
		left: 50px;
		right: 50px;
		border-radius: 0.5rem;
		height: 0.5rem;
		top: 0;
		background-color: rgba(255, 255, 255, 0.5);
		top: calc(var(--border-width) * -1);
		transform: translateY(-50%);
	}
}

.moveRowCursor {
	--cursor-width: 10rem;
	--cursor-height: 0.5rem;
	width: 0;
	height: 0;

	position: absolute;
	pointer-events: none;
	top: clamp(calc(var(--cursor-height) / 2), var(--cursor-y), calc(100% - (var(--cursor-height) / 2)));
	left: clamp(calc(var(--cursor-width) / 2), var(--cursor-x), calc(100% - (var(--cursor-width) / 2)));

	&:before {
		content: ' ';
		display: block;
		width: var(--cursor-width);
		transform: translate(calc(var(--cursor-width) / -2), calc(var(--cursor-height) / -2));
		border-radius: 0.5rem;
		height: var(--cursor-height);
		background-color: rgba(255, 255, 255, 0.5);
	}
}

.fullWidthEditorRow {
	grid-column: 1 / -1;
}